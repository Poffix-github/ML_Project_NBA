"""ML_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IBB4LgH4Uje_hXewLGOBKw9dWECOP_Qc

# Machine Learning Project

## NBA Match Predictions

### Currently working on adding significant features (so far: elo rating and win percentage, FT percentage, FG percentage, FG3 percentage and Rebounds of the last 10 games of both teams). The plan is to add as much as we can before starting feature selection.
"""

import pandas as pd

# Load the dataset
df = pd.read_csv("games.csv")
df

del df["GAME_STATUS_TEXT"] #deleting the most useless column 
df=df.sort_values("GAME_DATE_EST") #we order the games by date in ascending order
df = df.dropna() #let's drop all the rows containing null values
df = df.reset_index(drop=True) #reset the indexes

# Adding Elo rating of each team for each game (basic version we have to improve, 
# we may want to somehow reset the Elo ratings of each team at the beginning of each new season)

def add_elo_ratings(dataset, team1_column, team2_column):
  # Initialize the Elo rating of each team to 1500
  elo_ratings = {team: 1500 for team in dataset[team1_column]}
  
  # Add new columns for the Elo ratings of each team
  dataset['home_team_elo'] = 0
  dataset['away_team_elo'] = 0
  
  # Iterate through the games and update the Elo ratings
  for index, row in dataset.iterrows():
    team1 = row[team1_column]
    team2 = row[team2_column]
    
    # Add the Elo ratings to the dataset
    dataset.at[index, 'home_team_elo'] = elo_ratings[team1]
    dataset.at[index, 'away_team_elo'] = elo_ratings[team2]
    
    # Calculate the Elo rating for each team using the formula
    team1_rating = elo_ratings[team1]
    team2_rating = elo_ratings[team2]
    
    # Update the Elo ratings based on the outcome of the game
    if row['HOME_TEAM_WINS'] == 1:
      team1_rating, team2_rating = update_elo_ratings(team1_rating, team2_rating)
    else:
      team2_rating, team1_rating = update_elo_ratings(team2_rating, team1_rating)
      
    # Update the Elo ratings in the dictionary
    elo_ratings[team1] = team1_rating
    elo_ratings[team2] = team2_rating
    
  return dataset


def update_elo_ratings(winner_rating, loser_rating):
  # Calculate the expected score for each team
  winner_expected = 1 / (1 + 10 ** ((loser_rating - winner_rating) / 400))
  loser_expected = 1 / (1 + 10 ** ((winner_rating - loser_rating) / 400))
  
  # Calculate the new ratings
  k = 32  # The k-factor determines the weight of the game in the rating system
  winner_rating += k * (1 - winner_expected)
  loser_rating += k * (0 - loser_expected)
  
  return winner_rating, loser_rating

#running the above function on our dataframe
df = add_elo_ratings(df, 'HOME_TEAM_ID', 'VISITOR_TEAM_ID')

df['elo_difference'] = df['home_team_elo']-df['away_team_elo']

def calculate_win_pct(df):
  # Create a new column for the home team's win percentage
  df['WIN_PCT_10_home'] = 0.0
  # Create a new column for the away team's win percentage
  df['WIN_PCT_10_away'] = 0.0

  # Iterate over the rows of the dataframe
  for i, row in df.iterrows():
    # Get the home team's ID and the away team's ID
    home_team_id = row['HOME_TEAM_ID']
    away_team_id = row['VISITOR_TEAM_ID']
    game_date = row['GAME_DATE_EST']

    # Find the home team's previous 10 matches
    home_team_prev_matches = df[((df['HOME_TEAM_ID'] == home_team_id) | (df['VISITOR_TEAM_ID'] == home_team_id)) & (df['GAME_DATE_EST'] < game_date)].tail(10)
    # Find the away team's previous 10 matches
    away_team_prev_matches = df[((df['HOME_TEAM_ID'] == away_team_id) | (df['VISITOR_TEAM_ID'] == away_team_id)) & (df['GAME_DATE_EST'] < game_date)].tail(10)

    # Calculate the home team's win percentage in the previous 10 matches, or set it to 0.0 if there are not enough previous matches
    if home_team_prev_matches.shape[0] == 10:
     home_team_win_pct = home_team_prev_matches[((home_team_prev_matches['HOME_TEAM_ID'] == home_team_id) & (home_team_prev_matches['HOME_TEAM_WINS'] == 1)) 
                                              | ((home_team_prev_matches['VISITOR_TEAM_ID'] == home_team_id) & (home_team_prev_matches['HOME_TEAM_WINS'] == 0))].shape[0] / 10
    else:
      home_team_win_pct = 0.0

    # Calculate the away team's win percentage in the previous 10 matches, or set it to 0.0 if there are not enough previous matches
    if away_team_prev_matches.shape[0] == 10:
       away_team_win_pct = away_team_prev_matches[((away_team_prev_matches['HOME_TEAM_ID'] == away_team_id) & (away_team_prev_matches['HOME_TEAM_WINS'] == 1)) 
       | ((away_team_prev_matches['VISITOR_TEAM_ID'] == away_team_id) & (away_team_prev_matches['HOME_TEAM_WINS'] == 0))].shape[0] / 10
    else:
      away_team_win_pct = 0.0

     # Set the win percentage for the home team and the away team in the current row
    df.at[i, 'WIN_PCT_10_home'] = home_team_win_pct
    df.at[i, 'WIN_PCT_10_away'] = away_team_win_pct

  # Return the modified dataframe
  return df


df = calculate_win_pct(df)

def get_matches_for_team(df, team_id):
  # Filter the dataframe to only include matches played by a specific team
  team_matches = df[(df['HOME_TEAM_ID'] == team_id) | (df['VISITOR_TEAM_ID'] == team_id)]
  # Return the filtered dataframe
  return team_matches

# Example:
team_id = 1610612742
team_matches = get_matches_for_team(df, team_id)

 #checking if win percentage computation works well
team_matches[['HOME_TEAM_ID', 'VISITOR_TEAM_ID', 'HOME_TEAM_WINS', 'WIN_PCT_10_home', 'WIN_PCT_10_away']].head(30)

#our data frame with win percenage and elo rating features added
df

def calculate_FG_PCT_average(df):
  # Create a new column 
  df['FG_PCT_avg_10_HOME'] = 0.0
  # Create a new column 
  df['FG_PCT_avg_10_AWAY'] = 0.0

  # Iterate over the rows of the dataframe
  for i, row in df.iterrows():
    # Get the home team's ID and the away team's ID
    home_team_id = row['HOME_TEAM_ID']
    away_team_id = row['VISITOR_TEAM_ID']
    game_date = row['GAME_DATE_EST']

    # Find the home team's previous 10 matches
    home_team_prev_matches = df[((df['HOME_TEAM_ID'] == home_team_id) | (df['VISITOR_TEAM_ID'] == home_team_id)) & (df['GAME_DATE_EST'] < game_date)].tail(10)
    # Find the away team's previous 10 matches
    away_team_prev_matches = df[((df['HOME_TEAM_ID'] == away_team_id) | (df['VISITOR_TEAM_ID'] == away_team_id)) & (df['GAME_DATE_EST'] < game_date)].tail(10)

    # Calculate the home team's FG_PCT average in the previous 10 matches, or set it to 0.0 if there are not enough previous matches
    if home_team_prev_matches.shape[0] == 10:
     home_team_FG_pctsum1 = home_team_prev_matches[home_team_prev_matches['HOME_TEAM_ID'] == home_team_id]['FG_PCT_home'].sum()
     home_team_FG_pctsum2 = home_team_prev_matches[home_team_prev_matches['VISITOR_TEAM_ID'] == home_team_id]['FG_PCT_away'].sum()
     home_team_FG_pct_avg =  (home_team_FG_pctsum1 + home_team_FG_pctsum2) / 10
    else:
      home_team_FG_pct_avg = 0.0

    # Calculate the away team's FG_PCT average in the previous 10 matches, or set it to 0.0 if there are not enough previous matches
    if away_team_prev_matches.shape[0] == 10:
       away_team_FG_pctsum1 = away_team_prev_matches[away_team_prev_matches['HOME_TEAM_ID'] == away_team_id]['FG_PCT_home'].sum()
       away_team_FG_pctsum2 = away_team_prev_matches[away_team_prev_matches['VISITOR_TEAM_ID'] == away_team_id]['FG_PCT_away'].sum()
       away_team_FG_pct_avg =  (away_team_FG_pctsum1 + away_team_FG_pctsum2) / 10
       
    else:
      away_team_FG_pct_avg = 0.0

     # Set the FG_PCT average for the home team and the away team in the current row
    df.at[i, 'FG_PCT_avg_10_HOME'] = home_team_FG_pct_avg
    df.at[i, 'FG_PCT_avg_10_AWAY'] = away_team_FG_pct_avg

  # Return the modified dataframe
  return df

calculate_FG_PCT_average(df)

team_matches = get_matches_for_team(df, team_id)

 #checking if everything works fine
team_matches[['HOME_TEAM_ID', 'VISITOR_TEAM_ID', 'FG_PCT_home', 'FG_PCT_away', 'FG_PCT_avg_10_HOME', 'FG_PCT_avg_10_AWAY',  ]].tail(30)

#Let's add other features with the same procedure

def calculate_stats(df):
  
  df['FT_PCT_avg_10_HOME'] = 0.0
  df['FT_PCT_avg_10_AWAY'] = 0.0
  df['FG3_PCT_avg_10_HOME'] = 0.0
  df['FG3_PCT_avg_10_AWAY'] = 0.0
  df['REB_avg_10_HOME'] = 0.0
  df['REB_avg_10_AWAY'] = 0.0
  # Iterate over the rows of the dataframe
  for i, row in df.iterrows():
    # Get the home team's ID and the away team's ID
    home_team_id = row['HOME_TEAM_ID']
    away_team_id = row['VISITOR_TEAM_ID']
    game_date = row['GAME_DATE_EST']

    # Find the home team's previous 10 matches
    home_team_prev_matches = df[((df['HOME_TEAM_ID'] == home_team_id) | (df['VISITOR_TEAM_ID'] == home_team_id)) & (df['GAME_DATE_EST'] < game_date)].tail(10)
    # Find the away team's previous 10 matches
    away_team_prev_matches = df[((df['HOME_TEAM_ID'] == away_team_id) | (df['VISITOR_TEAM_ID'] == away_team_id)) & (df['GAME_DATE_EST'] < game_date)].tail(10)

    # Calculate the home team's FG_PCT average in the previous 10 matches, or set it to 0.0 if there are not enough previous matches
    if home_team_prev_matches.shape[0] == 10:
     home_team_FT_pctsum1 = home_team_prev_matches[home_team_prev_matches['HOME_TEAM_ID'] == home_team_id]['FT_PCT_home'].sum()
     home_team_FT_pctsum2 = home_team_prev_matches[home_team_prev_matches['VISITOR_TEAM_ID'] == home_team_id]['FT_PCT_away'].sum()
     home_team_FT_pct_avg =  (home_team_FT_pctsum1 + home_team_FT_pctsum2) / 10
     home_team_FG3_pctsum1 = home_team_prev_matches[home_team_prev_matches['HOME_TEAM_ID'] == home_team_id]['FG3_PCT_home'].sum()
     home_team_FG3_pctsum2 = home_team_prev_matches[home_team_prev_matches['VISITOR_TEAM_ID'] == home_team_id]['FG3_PCT_away'].sum()
     home_team_FG3_pct_avg =  (home_team_FG3_pctsum1 + home_team_FG3_pctsum2) / 10
     home_team_REB_sum1 = home_team_prev_matches[home_team_prev_matches['HOME_TEAM_ID'] == home_team_id]['REB_home'].sum()
     home_team_REB_sum2 = home_team_prev_matches[home_team_prev_matches['VISITOR_TEAM_ID'] == home_team_id]['REB_away'].sum()
     home_team_REB_avg =  (home_team_REB_sum1 + home_team_REB_sum2) / 10
    else:
      home_team_FT_pct_avg = 0.0
      home_team_FG3_pct_avg = 0.0
      home_team_REB_avg = 0.0
    # Calculate the away team's FG_PCT average in the previous 10 matches, or set it to 0.0 if there are not enough previous matches
    if away_team_prev_matches.shape[0] == 10:
       away_team_FT_pctsum1 = away_team_prev_matches[away_team_prev_matches['HOME_TEAM_ID'] == away_team_id]['FT_PCT_home'].sum()
       away_team_FT_pctsum2 = away_team_prev_matches[away_team_prev_matches['VISITOR_TEAM_ID'] == away_team_id]['FT_PCT_away'].sum()
       away_team_FT_pct_avg =  (away_team_FT_pctsum1 + away_team_FT_pctsum2) / 10
       away_team_FG3_pctsum1 = away_team_prev_matches[away_team_prev_matches['HOME_TEAM_ID'] == away_team_id]['FG3_PCT_home'].sum()
       away_team_FG3_pctsum2 = away_team_prev_matches[away_team_prev_matches['VISITOR_TEAM_ID'] == away_team_id]['FG3_PCT_away'].sum()
       away_team_FG3_pct_avg =  (away_team_FG3_pctsum1 + away_team_FG3_pctsum2) / 10
       away_team_REB_sum1 = away_team_prev_matches[away_team_prev_matches['HOME_TEAM_ID'] == away_team_id]['REB_home'].sum()
       away_team_REB_sum2 = away_team_prev_matches[away_team_prev_matches['VISITOR_TEAM_ID'] == away_team_id]['REB_away'].sum()
       away_team_REB_avg =  (away_team_REB_sum1 + away_team_REB_sum2) / 10
    else:
      away_team_FT_pct_avg = 0.0
      away_team_FG3_pct_avg = 0.0
      away_team_REB_avg = 0.0
     # Set the FG_PCT average for the home team and the away team in the current row
    df.at[i, 'FT_PCT_avg_10_HOME'] = home_team_FT_pct_avg
    df.at[i, 'FT_PCT_avg_10_AWAY'] = away_team_FT_pct_avg
    df.at[i, 'FG3_PCT_avg_10_HOME'] = home_team_FG3_pct_avg
    df.at[i, 'FG3_PCT_avg_10_AWAY'] = away_team_FG3_pct_avg
    df.at[i, 'REB_avg_10_HOME'] = home_team_REB_avg
    df.at[i, 'REB_avg_10_AWAY'] = away_team_REB_avg

  # Return the modified dataframe
  return df

calculate_stats(df)

df1 = df[df['GAME_DATE_EST']>'2003-12-31'][['HOME_TEAM_ID', 'VISITOR_TEAM_ID','elo_difference', 'WIN_PCT_10_home','WIN_PCT_10_away', 'FG_PCT_avg_10_HOME', 'FG_PCT_avg_10_AWAY', 'FT_PCT_avg_10_HOME', 'FT_PCT_avg_10_AWAY', 'FG3_PCT_avg_10_HOME', 'FG3_PCT_avg_10_AWAY', 'REB_avg_10_HOME', 'REB_avg_10_AWAY', 'HOME_TEAM_WINS']].reset_index(drop=True)
df1[['elo_difference', 'WIN_PCT_10_home','WIN_PCT_10_away', 'FG_PCT_avg_10_HOME', 'FG_PCT_avg_10_AWAY', 'FT_PCT_avg_10_HOME', 'FT_PCT_avg_10_AWAY', 
    'FG3_PCT_avg_10_HOME', 'FG3_PCT_avg_10_AWAY', 'REB_avg_10_HOME', 'REB_avg_10_AWAY']]

# Feature importance for selection
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
X = df1[['elo_difference', 'WIN_PCT_10_home','WIN_PCT_10_away', 'FG_PCT_avg_10_HOME', 'FG_PCT_avg_10_AWAY', 'FT_PCT_avg_10_HOME', 'FT_PCT_avg_10_AWAY', 
        'FG3_PCT_avg_10_HOME', 'FG3_PCT_avg_10_AWAY', 'REB_avg_10_HOME', 'REB_avg_10_AWAY']]
y = df1['HOME_TEAM_WINS']
# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a random forest classifier on the training data
clf = RandomForestClassifier(n_estimators=100)
clf.fit(X_train, y_train)

# Get the feature importances
importances = clf.feature_importances_

# Sort the feature importances in descending order
sorted_importances = sorted(importances, reverse=True)

# Print the feature names and importances
for feature, importance in zip(X.columns, sorted_importances):
    print(f"{feature}: {importance:.2f}")

#Feature Scaling
features = ['elo_difference', 'WIN_PCT_10_home','WIN_PCT_10_away', 'FG_PCT_avg_10_HOME', 
            'FG_PCT_avg_10_AWAY', 'FT_PCT_avg_10_HOME', 
            'FT_PCT_avg_10_AWAY', 'FG3_PCT_avg_10_HOME', 'FG3_PCT_avg_10_AWAY', 'REB_avg_10_HOME', 'REB_avg_10_AWAY']
from sklearn.preprocessing import StandardScaler

# Separate the features and the target
X = df1[features]
y = df1['HOME_TEAM_WINS']

# Initialize the scaler
scaler = StandardScaler()

# Fit the scaler to the features
scaler.fit(X)

# Transform the features using the scaler
X_scaled = scaler.transform(X)

#First try: getting 64% accuracy (upper bound is 70%)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Create the Random Forest model
model = RandomForestClassifier(n_estimators=100)

# Fit the model to the training data
model.fit(X_train, y_train)

# Evaluate the model on the test data
accuracy = model.score(X_test, y_test)
print("Accuracy:", accuracy)

